name: build-on-call

on:
  workflow_call:

jobs:

  shellcheck:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check All "run*" Files
        run: |
          for file in $(find ./root/etc -type f -name "run*"); do
            echo "Checking: $file"
            shellcheck "$file"
          done

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        architecture: [linux-arm64, linux-amd64]
    needs: [shellcheck]
    outputs:
      version:                  ${{ steps.prep.outputs.version }}
      created:                  ${{ steps.prep.outputs.created }}
      image-tag-full-amd64:     ${{ steps.prep.outputs.image-tag-full-amd64 }}
      image-tag-full-arm64:     ${{ steps.prep.outputs.image-tag-full-arm64 }}
      image-tag-latest:         ${{ steps.prep.outputs.image-tag-latest }}
      image-tag-branch:         ${{ steps.prep.outputs.image-tag-branch }}
      image-tag-branch-version: ${{ steps.prep.outputs.image-tag-branch-version }}
      image-tag-branch-sha:     ${{ steps.prep.outputs.image-tag-branch-sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if Architecture Exists
        id: arch-exists
        run: |
          (test -f ${{ matrix.architecture }}.Dockerfile && echo "result=ok" >> $GITHUB_OUTPUT) || echo "result=nok" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        if: (steps.arch-exists.outputs.result == 'ok')
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: (steps.arch-exists.outputs.result == 'ok')
        uses: docker/setup-buildx-action@v3

      - name: Login to docker.io
        if: (steps.arch-exists.outputs.result == 'ok')
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io
        if: (steps.arch-exists.outputs.result == 'ok')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Outputs for Next Steps
        if: (steps.arch-exists.outputs.result == 'ok')
        id: prep
        env:
          ARCHITECTURE:     ${{ matrix.architecture }}
          BRANCH:           ${{ github.ref_name }}
          RUN_NUMBER:       ${{ github.run_number }}
          REPOSITORY:       ${{ github.repository }}
          REPOSITORY_OWNER: ${{ github.repository_owner }}
          SHA:              ${{ github.sha }}
          SERVER_URL:       ${{ github.server_url }}
        run: |
          VERSION=$(jq -r '.version // empty' < VERSION.json)
          VERSION=${VERSION//\~/-}
          [[ -z ${VERSION} ]] && VERSION=$(date --utc --date=@$(git show -s --format=%ct $(git rev-parse --short HEAD)) +'%Y%m%d%H%M%S')
          PR_BRANCH=$(jq -r '.branch // empty' < VERSION.json)
          [[ -n ${PR_BRANCH} ]] && PR_BRANCH=-${PR_BRANCH}
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "revision=${SHA}" >> $GITHUB_OUTPUT
          echo "source=${SERVER_URL}/${REPOSITORY}/tree/${BRANCH}" >> $GITHUB_OUTPUT
          echo "vendor=${REPOSITORY_OWNER}" >> $GITHUB_OUTPUT
          echo "url=${SERVER_URL}/${REPOSITORY}/blob/master/README.md" >> $GITHUB_OUTPUT
          echo "platform=${ARCHITECTURE//-/\/}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "package-version=${BRANCH}-${SHA:0:7}" >> $GITHUB_OUTPUT
          echo "image-tag-cache=${REPOSITORY}:${BRANCH}${PR_BRANCH}-buildcache-${ARCHITECTURE}" >> $GITHUB_OUTPUT
          echo "image-tag-full=${REPOSITORY}:${BRANCH}${PR_BRANCH}-${SHA:0:7}-${RUN_NUMBER}-${ARCHITECTURE}" >> $GITHUB_OUTPUT
          echo "image-tag-full-${ARCHITECTURE/linux-/}=${REPOSITORY}:${BRANCH}${PR_BRANCH}-${SHA:0:7}-${RUN_NUMBER}-${ARCHITECTURE}" >> $GITHUB_OUTPUT
          echo "image-tag-branch=${REPOSITORY}:${BRANCH}${PR_BRANCH}" >> $GITHUB_OUTPUT
          echo "image-tag-branch-version=${REPOSITORY}:${BRANCH}${PR_BRANCH}-${VERSION}" >> $GITHUB_OUTPUT
          echo "image-tag-branch-sha=${REPOSITORY}:${BRANCH}${PR_BRANCH}-${SHA:0:7}" >> $GITHUB_OUTPUT
          [[ $(jq -r '.latest // empty' < VERSION.json) == true ]] && echo "image-tag-latest=${REPOSITORY}:latest" >> $GITHUB_OUTPUT
          echo 'build-args<<EOF' >> $GITHUB_OUTPUT
            jq -r 'to_entries[] | [(.key | ascii_upcase),.value] | join("=")' < VERSION.json >> $GITHUB_OUTPUT
            echo "BUILD_ARCHITECTURE=${ARCHITECTURE}" >> $GITHUB_OUTPUT
            echo "PACKAGE_VERSION=${BRANCH}-${SHA:0:7}" >> $GITHUB_OUTPUT
            echo "IMAGE_STATS=$(jq '.app = "'"${REPOSITORY/${REPOSITORY_OWNER}\//}"'" | .image = "'"${REPOSITORY}:${BRANCH}"'" | .revision = "'"${SHA:0:7}"'" | .version = "'"${VERSION}"'"' <<< "{}" | base64 -w 0)" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Build Image
        if: (steps.arch-exists.outputs.result == 'ok')
        uses: docker/build-push-action@v5
        with:
          provenance: false
          load: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          cache-from: type=registry,ref=${{ steps.prep.outputs.image-tag-cache }}
          cache-to: type=registry,ref=${{ steps.prep.outputs.image-tag-cache }},mode=max
          tags: ${{ steps.prep.outputs.image-tag-full }}
          build-args: |
            ${{ steps.prep.outputs.build-args }}

      - name: List Packages and Smoke Test
        if: (steps.arch-exists.outputs.result == 'ok')
        env:
          IMAGE:           ${{ steps.prep.outputs.image-tag-full }}
          PACKAGE_VERSION: ${{ steps.prep.outputs.package-version }}
          PLATFORM:        ${{ steps.prep.outputs.platform }}
        run: |
          upstream_tag=$(jq -r '.upstream_tag' < ./VERSION.json)
          upstream_image=$(jq -r '.upstream_image' < ./VERSION.json)
          if [[ ${upstream_tag} == alpine* || ${upstream_image} == alpine* ]]; then
            docker run --platform="${PLATFORM}" --rm --entrypoint="" "${IMAGE}" apk -vv info | sort > "${PACKAGE_VERSION}-packages.log" 2>&1
          else
            docker run --platform="${PLATFORM}" --rm --entrypoint="" "${IMAGE}" apt list --installed > "${PACKAGE_VERSION}-packages.log" 2>&1
          fi
          test_url=$(jq -r '.test_url' < ./VERSION.json)
          test_amd64=$(jq -r '.test_arm64' < ./VERSION.json)
          test_arm64=$(jq -r '.test_arm64' < ./VERSION.json)
          if [[ ${test_url} != null ]]; then
            [[ ${PLATFORM} == linux/amd64 ]]                                && do_test=true
            [[ ${PLATFORM} == linux/arm64 ]] && [[ ${test_arm64} == true ]] && do_test=true
          fi
          if [[ ${do_test} == true ]]; then
            docker run --platform="${PLATFORM}" --network host -d --name service "${IMAGE}"
            currenttime=$(date +%s); maxtime=$((currenttime+120)); while (! curl -fsSL -m 10 -b /dev/shm/cookie "${test_url}" > /dev/null) && [[ "$currenttime" -lt "$maxtime" ]]; do sleep 1; currenttime=$(date +%s); done
            docker logs service > "${PACKAGE_VERSION}-test.log" 2>&1
            curl -fsSL -m 10 -b /dev/shm/cookie "${test_url}" > /dev/null
            exit $?
          fi

      - name: Push Image
        if: (steps.arch-exists.outputs.result == 'ok')
        uses: docker/build-push-action@v5
        with:
          provenance: false
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          tags: |
            docker.io/${{ steps.prep.outputs.image-tag-full }}
            ghcr.io/${{ steps.prep.outputs.image-tag-full }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.image-tag-branch }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            ${{ steps.prep.outputs.build-args }}

      - name: Upload Results
        continue-on-error: true
        if: always()
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: warn
          name: ${{ steps.prep.outputs.package-version }}-results-${{ matrix.architecture }}
          path: |
            ${{ steps.prep.outputs.package-version }}-*.log

  publish:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        registry: [docker.io, ghcr.io]
    needs: [build]
    steps:
      - name: Login to docker.io
        if: (matrix.registry == 'docker.io')
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io
        if: (matrix.registry == 'ghcr.io')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Manifests
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
          IMAGE_TAG_FULL_AMD64:     ${{ needs.build.outputs.image-tag-full-amd64 }}
          IMAGE_TAG_FULL_ARM64:     ${{ needs.build.outputs.image-tag-full-arm64 }}
          IMAGE_TAG_LATEST:         ${{ needs.build.outputs.image-tag-latest }}
          IMAGE_TAG_BRANCH:         ${{ needs.build.outputs.image-tag-branch }}
          IMAGE_TAG_BRANCH_VERSION: ${{ needs.build.outputs.image-tag-branch-version }}
          IMAGE_TAG_BRANCH_SHA:     ${{ needs.build.outputs.image-tag-branch-sha }}
        run: |
          echo "${IMAGE_TAG_BRANCH} ${IMAGE_TAG_FULL_AMD64} ${IMAGE_TAG_FULL_ARM64}" >> manifest.list
          echo "${IMAGE_TAG_BRANCH_VERSION} ${IMAGE_TAG_FULL_AMD64} ${IMAGE_TAG_FULL_ARM64}" >> manifest.list
          echo "${IMAGE_TAG_BRANCH_SHA} ${IMAGE_TAG_FULL_AMD64} ${IMAGE_TAG_FULL_ARM64}" >> manifest.list
          [[ -n "${IMAGE_TAG_LATEST}" ]] && echo "${IMAGE_TAG_LATEST} ${IMAGE_TAG_FULL_AMD64} ${IMAGE_TAG_FULL_ARM64}" >> manifest.list
          while read manifest; do
            docker manifest create $(awk '{print $1}' <<< ${manifest}) $(awk '{print $2}' <<< ${manifest}) $(awk '{print $3}' <<< ${manifest})
          done < manifest.list

      - name: Push Manifests
        uses: nick-fields/retry@v3
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        with:
          max_attempts: 3
          timeout_minutes: 5
          retry_wait_seconds: 30
          command: |
            while read manifest; do
              docker manifest push $(awk '{print $1}' <<< ${manifest})
            done < manifest.list

  tags:
    runs-on: ubuntu-22.04
    needs: [build, publish]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Git Config
        env:
          REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          git config --global user.email "${REPOSITORY_OWNER}@users.noreply.github.com"
          git config --global user.name "${REPOSITORY_OWNER}"

      - name: Update "tags.json" File
        uses: nick-fields/retry@v3
        env:
          PERSONAL_TOKEN:           ${{ secrets.PERSONAL_TOKEN }}
          REPOSITORY:               ${{ github.repository }}
          CREATED:                  ${{ needs.build.outputs.created }}
          IMAGE_TAG_BRANCH:         ${{ needs.build.outputs.image-tag-branch }}
          IMAGE_TAG_BRANCH_VERSION: ${{ needs.build.outputs.image-tag-branch-version }}
          IMAGE_TAG_BRANCH_SHA:     ${{ needs.build.outputs.image-tag-branch-sha }}
        with:
          max_attempts: 3
          timeout_minutes: 5
          retry_wait_seconds: 30
          command: |
            IS_LATEST=$(jq -r '.latest // false' < VERSION.json)
            DESCRIPTION=$(jq -r '.description // empty' < VERSION.json)
            HIDE=$(jq -r '.hide // false' < VERSION.json)
            IMAGE_TAG_BRANCH=${IMAGE_TAG_BRANCH/$REPOSITORY:/}
            IMAGE_TAG_BRANCH_VERSION=${IMAGE_TAG_BRANCH_VERSION/$REPOSITORY:/}
            IMAGE_TAG_BRANCH_SHA=${IMAGE_TAG_BRANCH_SHA/$REPOSITORY:/}
            git clone -b "master" "https://${PERSONAL_TOKEN}@github.com/${REPOSITORY}.git" masterGit
            cd "masterGit" || exit 1
            if [[ ${HIDE} != true ]]; then
              [[ ! -f tags.json ]] && echo "{}" > tags.json
              tags_json=$(cat ./tags.json)
              jq '.'"${IMAGE_TAG_BRANCH}"'.tags[0] = "'"${IMAGE_TAG_BRANCH}"'" | .'"${IMAGE_TAG_BRANCH}"'.tags[1] = "'"${IMAGE_TAG_BRANCH_VERSION}"'" | .'"${IMAGE_TAG_BRANCH}"'.tags[2] = "'"${IMAGE_TAG_BRANCH_SHA}"'" | .'"${IMAGE_TAG_BRANCH}"'.last_updated = "'"${CREATED}"'" | .'"${IMAGE_TAG_BRANCH}"'.latest = '"${IS_LATEST}"' | .'"${IMAGE_TAG_BRANCH}"'.description = "'"${DESCRIPTION}"'"' <<< "${tags_json}" | jq --sort-keys > tags.json
            fi
            git add .
            if git commit -m "Update tags.json [skip ci]"; then
              git push
            fi
            jq < tags.json
          on_retry_command: |
            cd .. || exit 1
            rm -rf "masterGit"

  notify:
    runs-on: ubuntu-22.04
    if: always()
    needs: [build, publish]
    steps:
      - name: Send Discord Notification
        uses: nick-fields/retry@v3
        env:
          VERSION:          ${{ needs.build.outputs.version }}
          STATUS:           ${{ needs.publish.result }}
          DISCORD_WEBHOOK:  ${{ secrets.DISCORD_WEBHOOK }}
          COMMIT_MESSAGE:   ${{ github.event.head_commit.message }}
          RUN_ID:           ${{ github.run_id }}
          REPOSITORY:       ${{ github.repository }}
          SHA:              ${{ github.sha }}
          IMAGE_TAG_BRANCH: ${{ needs.build.outputs.image-tag-branch }}
        with:
          max_attempts: 3
          timeout_minutes: 5
          retry_wait_seconds: 30
          command: |
            if [[ "${STATUS}" == "success" ]]; then
              COLOR="3066993"
            else
              MENTION='"content": "<@269648028502196224>",'
            fi
            if [[ -z ${COMMIT_MESSAGE} ]]; then
              COMMIT_MESSAGE="---"
            fi
            json='{
              '${MENTION}'
              "embeds": [
                {
                  "title": "'${IMAGE_TAG_BRANCH}'",
                  "url": "https://github.com/'${REPOSITORY}'/actions/runs/'${RUN_ID}'",
                  "color": '${COLOR:-15158332}',
                  "fields": [
                    {
                      "name": "Commit Message",
                      "value": "```'${COMMIT_MESSAGE//\"/\\\"}'```"
                    },
                    {
                      "name": "Commit SHA",
                      "value": "['${SHA:0:7}'](https://github.com/'${REPOSITORY}'/commit/'${SHA}')",
                      "inline": true
                    },
                    {
                      "name": "Version",
                      "value": "'${VERSION:----}'",
                      "inline": true
                    }
                  ],
                  "footer": {
                    "text": "Powered by GitHub Actions"
                  },
                  "timestamp": "'$(date -u +'%FT%T.%3NZ')'"
                }
              ]
            }'
            jq <<< "${json}"
            curl -fsSL --retry 5 -H "Content-Type: multipart/form-data" -F "payload_json=${json}" "${DISCORD_WEBHOOK}" > /dev/null
